import { parse } from '@auth0/mdl';
import { inspect } from 'node:util';
import fs from 'node:fs';

const data =
  'a366737461747573006776657273696f6e63312e3069646f63756d656e747381a267646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c6973737565725369676e6564a26a697373756572417574688446a16131622d37a1636b69646431323334590162a667646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6776657273696f6e63312e306c76616c6964697479496e666fa3667369676e6564c07818323032342d31312d32385430353a34373a32322e3538365a6976616c696446726f6dc07818323032342d31312d32385430353a34373a32322e3538365a6a76616c6964556e74696cc07818323032342d31322d32385430353a34373a32322e3538365a6c76616c756544696765737473a06d6465766963654b6579496e666fa1696465766963654b6579a5613102622d3101622d32d84058204ca6f4bbd37b799348117434e19d8eff6c81f7e530d4ea2749eacbab134c99f0622d33d840582018576f1f87b6347433e34060b358f25d99126d34a3fb7487a3e34456e6d2c060622d34d840582028b5b51cdeae0016cd06a91b01d430c9228cb0a8d4ecc6cecf25f87e38205a066f646967657374416c676f726974686d675348412d3235365840d0d6a3043e0662b3e1f2f180b68380bc514b018ef995e7d2223f8892fef306b91525c63be69c36635241fdb8c2c83dafa27007fb6b922d69b87baa9b784dada86a6e616d65537061636573a1716f72672e69736f2e31383031332e352e3182d8185860a46672616e646f6dd8405820f4a00f1384080da43ae937038c088a0fe19acad76dc052aeff65195d136b397d686469676573744944006c656c656d656e7456616c7565654c756b617371656c656d656e744964656e746966696572646e616d65d818585da46672616e646f6dd84058207d13fbfe9d1520229962d9ce6c4cca744b47d8013989bd5b54daf7d64adea425686469676573744944016c656c656d656e7456616c7565643132333471656c656d656e744964656e746966696572626964';

(async () => {
  const encodedDeviceResponse = Buffer.from(data, 'hex');
  const a = parse(encodedDeviceResponse);

  console.log(a);
  console.log(
    a.documents[0].issuerSigned.nameSpaces['org.iso.18013.5.1'].map((i) => {
      return {
        key: i.elementIdentifier,
        value: i.elementValue,
      };
    }),
  );
})();
